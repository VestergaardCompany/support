<templateSet group="VCAS">
  <template name="gstf" value="    /**&#10;     * $DESCRIPTION_OF_PROPERTY$&#10;     *&#10;     * @var $DATA_TYPE$|null&#10;     */&#10;    protected $$$CORE_PROPERTY$ = null;&#10;&#10;    /**&#10;     * Set the given $PROPERTY_IN_DESCRIPTION$&#10;     *&#10;     * @param $DATA_TYPE$ $$$INPUT_ARGUMENT$ $DESCRIPTION_OF_PROPERTY$&#10;     *&#10;     * @return void&#10;     */&#10;    public function set$PROPERTY$($$$INPUT_ARGUMENT$){&#10;        $$this-&gt;$CORE_PROPERTY$ = $$$INPUT_ARGUMENT$;&#10;    }&#10;    &#10;    /**&#10;     * Get the given $PROPERTY_IN_DESCRIPTION$&#10;     *&#10;     * If no $PROPERTY_IN_DESCRIPTION$ has been set, this method will&#10;     * set and return a default $PROPERTY_IN_DESCRIPTION$, if any such&#10;     * value is available&#10;     *&#10;     * @see getDefault$PROPERTY$()&#10;     *&#10;     * @return $DATA_TYPE$|null $PROPERTY_IN_DESCRIPTION$ or null if none $PROPERTY_IN_DESCRIPTION$ has been set&#10;     */&#10;    public function get$PROPERTY$(){&#10;        if(!isset($$this-&gt;$CORE_PROPERTY$)){&#10;            $$this-&gt;$CORE_PROPERTY$ = $this-&gt;getDefault$PROPERTY$();&#10;        }&#10;        return $$this-&gt;$CORE_PROPERTY$;&#10;    }&#10;    &#10;    /**&#10;     * Get a default $PROPERTY_IN_DESCRIPTION$ value, if any is available&#10;     *&#10;     * @return $DATA_TYPE$|null A default $PROPERTY_IN_DESCRIPTION$ value or Null if no default value is available&#10;     */&#10;    public function getDefault$PROPERTY$(){&#10;        return null;&#10;    }&#10;    &#10;    /**&#10;     * Check if $PROPERTY_IN_DESCRIPTION$ has been set&#10;     *&#10;     * @return bool True if $PROPERTY_IN_DESCRIPTION$ has been set, false if not&#10;     */&#10;    public function has$PROPERTY$(){&#10;        return isset($$this-&gt;$CORE_PROPERTY$);&#10;    }&#10;    &#10;    /**&#10;     * Check if a default $PROPERTY_IN_DESCRIPTION$ is available or not&#10;     *&#10;     * @return bool True of a default $PROPERTY_IN_DESCRIPTION$ is available, false if not&#10;     */&#10;    public function hasDefault$PROPERTY$(){&#10;        return  false; //!is_null($this-&gt;getDefault$PROPERTY$());&#10;    }" description="Getter Setter Trait, VCAS version 1.0.0" toReformat="true" toShortenFQNames="true">
    <variable name="DESCRIPTION_OF_PROPERTY" expression="" defaultValue="&quot;Description of my property&quot;" alwaysStopAt="true" />
    <variable name="DATA_TYPE" expression="enum(&quot;string&quot;,&quot;int&quot;,&quot;float&quot;,&quot;bool&quot;,&quot;resource&quot;,&quot;null&quot;,&quot;callable&quot;,&quot;array&quot;,&quot;mixed&quot;,&quot;string[]&quot;,&quot;int[]&quot;,&quot;float[]&quot;,&quot;bool[]&quot;,&quot;resource[]&quot;,&quot;callable[]&quot;,&quot;array[]&quot;,&quot;mixed[]&quot;)" defaultValue="&quot;mixed&quot;" alwaysStopAt="true" />
    <variable name="CORE_PROPERTY" expression="" defaultValue="&quot;myProperty&quot;" alwaysStopAt="true" />
    <variable name="PROPERTY" expression="capitalize(CORE_PROPERTY)" defaultValue="" alwaysStopAt="false" />
    <variable name="PROPERTY_IN_DESCRIPTION" expression="underscoresToSpaces(snakeCase(PROPERTY))" defaultValue="" alwaysStopAt="false" />
    <variable name="INPUT_ARGUMENT" expression="" defaultValue="&quot;value&quot;" alwaysStopAt="true" />
    <context>
      <option name="PHP" value="true" />
    </context>
  </template>
</templateSet>